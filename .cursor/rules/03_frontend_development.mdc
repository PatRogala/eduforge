---
description:
globs:
alwaysApply: true
---
# Frontend Development Standards

## Technology Stack
- HAML for views
- Tailwind CSS for styling
- ViewComponents for reusable UI elements
- Stimulus.js for JavaScript functionality
- Bun.js for JavaScript runtime

## View Components

### Component Structure
```ruby
# app/components/example_component.rb
class ExampleComponent < ViewComponent::Base
  def initialize(title:, content:)
    @title = title
    @content = content
  end
end

# app/components/example_component.html.haml
.example-component
  %h2.text-xl.font-bold= @title
  .mt-4= @content
```

### Component Preview
```ruby
# app/previews/example_component_preview.rb
class ExampleComponentPreview < ViewComponent::Preview
  def default
    render ExampleComponent.new(
      title: "Example Title",
      content: "Example content"
    )
  end

  def with_long_content
    render ExampleComponent.new(
      title: "Long Example",
      content: "Very long content example..."
    )
  end
end
```

## HAML Guidelines

### View Structure
```haml
-# app/views/examples/show.html.haml
.container.mx-auto.px-4
  %h1.text-2xl.font-bold= @example.title

  .mt-4
    = render ExampleComponent.new(content: @example.content)

  .mt-8
    = render "shared/actions"
```

### Best Practices
- Use proper indentation (2 spaces)
- Keep views simple and focused
- Extract reusable parts into components
- Use Rails helpers appropriately
- Follow BEM naming convention for custom CSS

## Stimulus.js

### Controller Structure
```javascript
// app/javascript/controllers/example_controller.js
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  static targets = ["output"]
  static values = {
    url: String,
    refreshInterval: Number
  }

  connect() {
    if (this.hasRefreshIntervalValue) {
      this.startRefreshing()
    }
  }

  disconnect() {
    this.stopRefreshing()
  }
}
```

### Usage in Views
```haml
.example{"data-controller": "example",
         "data-example-url-value": example_path,
         "data-example-refresh-interval-value": "5000"}
  .output{"data-example-target": "output"}
```

## Tailwind CSS

### Organization
- Use utility classes consistently
- Extract common patterns into components
- Follow responsive design principles
- Use custom theme values in tailwind.config.js

### Best Practices
```haml
-# Good
.flex.items-center.justify-between.p-4.bg-white.shadow-sm
  %h2.text-xl.font-semibold.text-gray-900
  .flex.gap-2
    = render ButtonComponent.new(variant: :primary)
    = render ButtonComponent.new(variant: :secondary)

-# Avoid
.custom-header
  %h2.custom-title
  .custom-actions
    = render ButtonComponent.new(variant: :primary)
    = render ButtonComponent.new(variant: :secondary)
```

## Asset Management

### JavaScript
- Organize Stimulus controllers by feature
- Use ES6+ features
- Follow consistent naming conventions
- Implement proper error handling

### CSS
- Minimize custom CSS
- Use Tailwind's @apply for repeated patterns
- Keep custom CSS organized by component
- Follow mobile-first approach

## Performance

### Guidelines
- Lazy load images
- Minimize JavaScript bundle size
- Use proper caching strategies
- Optimize asset delivery
- Monitor frontend performance metrics
