---
description:
globs:
alwaysApply: true
---
# Testing Standards

## RSpec Guidelines

### Model Specs
```ruby
# spec/models/example_spec.rb
RSpec.describe Example, type: :model do
  describe 'validations' do
    it { is_expected.to validate_presence_of(:required_field) }
    it { is_expected.to validate_uniqueness_of(:unique_field) }
  end

  describe 'associations' do
    it { is_expected.to belong_to(:parent) }
    it { is_expected.to have_many(:children).dependent(:destroy) }
  end

  describe 'scopes' do
    describe '.active' do
      let!(:active_example) { create(:example, active: true) }
      let!(:inactive_example) { create(:example, active: false) }

      it 'returns only active records' do
        expect(described_class.active).to contain_exactly(active_example)
      end
    end
  end
end
```

### Controller Specs
```ruby
# spec/controllers/examples_controller_spec.rb
RSpec.describe ExamplesController, type: :controller do
  describe 'GET #index' do
    context 'when user is authenticated' do
      let(:user) { create(:user) }
      before { sign_in user }

      it 'returns successful response' do
        get :index
        expect(response).to be_successful
      end

      it 'assigns @examples' do
        examples = create_list(:example, 3)
        get :index
        expect(assigns(:examples)).to match_array(examples)
      end
    end
  end
end
```

### Request Specs
```ruby
# spec/requests/api/v1/examples_spec.rb
RSpec.describe 'API V1 Examples', type: :request do
  describe 'GET /api/v1/examples' do
    let(:user) { create(:user) }
    let(:token) { create(:access_token, resource_owner_id: user.id) }

    before do
      create_list(:example, 3)
    end

    it 'returns examples list' do
      get '/api/v1/examples', headers: { 'Authorization': "Bearer #{token.token}" }

      expect(response).to have_http_status(:ok)
      expect(json_response[:data].size).to eq(3)
    end
  end
end
```

### Component Specs
```ruby
# spec/components/example_component_spec.rb
RSpec.describe ExampleComponent, type: :component do
  it 'renders component with title' do
    render_inline(described_class.new(title: 'Test Title'))
    expect(page).to have_text('Test Title')
  end

  it 'renders component with content' do
    render_inline(described_class.new(content: 'Test Content'))
    expect(page).to have_text('Test Content')
  end
end
```

## Best Practices

### Factory Setup
```ruby
# spec/factories/examples.rb
FactoryBot.define do
  factory :example do
    sequence(:name) { |n| "Example #{n}" }
    active { true }

    trait :inactive do
      active { false }
    end

    trait :with_children do
      after(:create) do |example|
        create_list(:child, 3, parent: example)
      end
    end
  end
end
```

### Shared Examples
```ruby
# spec/support/shared_examples/authenticatable.rb
RSpec.shared_examples 'authenticatable' do
  it { is_expected.to validate_presence_of(:email) }
  it { is_expected.to validate_uniqueness_of(:email).case_insensitive }
  it { is_expected.to validate_presence_of(:password) }
end
```

### Test Organization
- Group related tests using `describe` and `context`
- Use meaningful descriptions
- Follow arrange-act-assert pattern
- Keep tests focused and isolated

### Testing Guidelines
- Write tests first (TDD when possible)
- Test happy and edge cases
- Use meaningful test data
- Keep tests DRY but readable
- Test one thing per example
- Use appropriate matchers

### Performance
- Use database cleaner strategy
- Avoid unnecessary database queries
- Use factories efficiently
- Mock external services

### Coverage
- Aim for high test coverage
- Focus on critical paths
- Test edge cases
- Include integration tests
- Test failure scenarios
