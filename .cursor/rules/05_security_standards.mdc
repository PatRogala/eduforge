---
description:
globs:
alwaysApply: true
---
# Security Standards

## Authorization

### Pundit Policies
```ruby
# app/policies/example_policy.rb
class ExamplePolicy < ApplicationPolicy
  def index?
    user.present?
  end

  def show?
    user.present? && (record.public? || record.user_id == user.id)
  end

  def create?
    user.present?
  end

  def update?
    user.present? && (user.admin? || record.user_id == user.id)
  end

  def destroy?
    user.present? && (user.admin? || record.user_id == user.id)
  end

  class Scope < Scope
    def resolve
      if user.admin?
        scope.all
      else
        scope.where(user_id: user.id).or(scope.where(public: true))
      end
    end
  end
end
```

### Controller Implementation
```ruby
# app/controllers/examples_controller.rb
class ExamplesController < ApplicationController
  before_action :authenticate_user!
  before_action :set_example, only: [:show, :edit, :update, :destroy]

  def index
    @examples = policy_scope(Example)
  end

  def show
    authorize @example
  end

  def update
    authorize @example
    if @example.update(example_params)
      redirect_to @example, notice: 'Updated successfully'
    else
      render :edit
    end
  end

  private

  def set_example
    @example = Example.find(params[:id])
  end

  def example_params
    params.require(:example).permit(:allowed, :attributes)
  end
end
```

## Data Protection

### Strong Parameters
```ruby
# Good
def user_params
  params.require(:user).permit(
    :email,
    :name,
    addresses_attributes: [:id, :street, :city, :_destroy]
  )
end

# Bad - Avoid
def unsafe_params
  params.require(:user).permit!
end
```

### SQL Injection Prevention
```ruby
# Good
User.where(status: params[:status])
User.where("status = ?", params[:status])

# Bad - Never do this
User.where("status = '#{params[:status]}'")
```
