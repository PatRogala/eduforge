---
description: Focuses specifically on Authentication (Devise) and Authorization (Pundit) implementation details.
globs:
alwaysApply: false
---
# Authentication & Authorization

## Authentication (Devise)

*   **Model:** `User` (`app/models/user.rb`)
*   **Configuration:** `config/initializers/devise.rb` (mostly defaults, `:reconfirmable` is true). `config/locales/devise.en.yml`, `config/locales/devise.pl.yml` provide translations.
*   **Modules:** `:database_authenticatable`, `:registerable`, `:recoverable`, `:rememberable`, `:validatable`.
*   **Routes:** Standard Devise routes generated by `devise_for :users` in `config/routes.rb`.
*   **Views:** Custom HAML views for Devise are located in `app/views/devise/`. They use Tailwind CSS for styling. Includes views for sessions, registrations, passwords, confirmations, unlocks, shared links, and error messages.
*   **Parameter Sanitization:** `ApplicationController` configures permitted parameters to allow `:avatar` on account update (`configure_permitted_parameters`).

## Authorization (Pundit)

*   **Setup:** Included in `ApplicationController` via `include Pundit::Authorization`.
*   **Policies:** Located in `app/policies/`.
    *   `ApplicationPolicy` defines default permissions (mostly `false`) and the base `Scope` class.
    *   `ProgrammingCourseLessonPolicy`: Defines `show?` logic (user must be enrolled) and a scope for enrolled user's lessons.
    *   `Instructor::ProgrammingCoursePolicy`: Defines permissions and scope for instructors managing their own courses.
    *   `Instructor::ProgrammingCourseLessonPolicy`: Defines permissions and scope for instructors managing lessons within their own courses.
*   **Usage:**
    *   `authorize @record` is called in controller actions (e.g., `ProgrammingCourseLessonsController#show`, `Instructor::ProgrammingCoursesController` actions, `Instructor::ProgrammingCourseLessonsController` actions).
    *   `policy_scope(Model)` is used to retrieve authorized collections, often within namespaced controllers or scopes (e.g., `Instructor::ProgrammingCoursesController`, `Instructor::ProgrammingCourseLessonPolicy::Scope`).
*   **Role-Based Access:**
    *   Uses `User#instructor?` and `User#admin?` methods (based on associated `Role` records).
    *   `ApplicationController#authenticate_instructor!` provides a controller-level check for instructor role.
    *   Policies frequently check `user.instructor?` or `user.admin?`.

## Roles

*   **Model:** `Role` (`app/models/role.rb`) defines roles. Constants `ADMIN_ID` and `INSTRUCTOR_ID` are defined.
*   **Join Table:** `UserRole` (`app/models/user_role.rb`) connects `User` and `Role`.
*   **Seeding:** Default Admin and Instructor roles are created in `db/seeds.rb`.
*   **Admin Access:** Admins have access to specific tools like PgHero and Sidekiq::Web, guarded by an `authenticate` block in `config/routes.rb`. Admin links are conditionally rendered in sidebar/mobile menu components.
